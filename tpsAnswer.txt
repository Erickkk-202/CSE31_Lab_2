TPS #1

1. Record your TPS partnersâ€™ names.
Amir Mairaj 
Adrian Navarro
Ralphilou Tatoy

2. Independently search the internet for 3 online tutorials on how to setup and use GDB (or LLDB) in
your system.

https://lldb.llvm.org/use/tutorial.html

https://lldb.llvm.org/use/map.html
https://code.visualstudio.com/docs/cpp/config-linux


3. Share your tutorials with your TPS partners.

4. Bookmark your results in the browser of your computer.



TPS #2

1. How do you compile your punishment.c so that you can debug it using GDB? Try it with your code
and set the name of the executable to punish.

To complie punishment.c so we that we can debug is by saying 
gcc -g -o punishment punishment.c

2. Once punishment.c is compiled, how do you load it in GDB? Try it with your program.

To load the code in GDB, type gdb punish

3. Once punish is loaded, how do you run it in GDB? Try to run your punish.
 
 To run the code type r or run, and hit enter.

4. What are breakpoints? How do you set a breakpoint at a certain line of your program? Try to set a
breakpoint in punishment.c where the for loop begins.
Lab 02: GDB and Pointers
CSE-031-01 Points: 20

Breakpoints are a line that you want to stop at when debugging. To set a breakpoint at line 20 type break 19

5. Now run the program again. It should stop at the breakpoint you set in Q4. From here, how do you run
the program line by line? Try to run the next 3 lines with your program.

To debug line by line is by typing "n" and pressing enter

6. While you are still running punish line by line, how can you see the value of a variable? Pick 3 variables
in your program and display them in the terminal one by one.

To see all the variables enter "P[variable]". by doing this it will show you all the varaibles in the line 

7. Now that you are tired of running line by line, how do you let the program finish its run? Try to finish
running your punish.
To let the program finish its run type continue or c and follow it by pressing enter.

8. How do you exit from GDB?

To exit from GDB enter q.




tps #3
1. How many variables were declared in the first line of main()? How many of them are pointers (and
what are they)?

There is four variables
There is 2 variables and two pointers

2. What will be the values of x, y, and arr[0] if you run the program? Validate your answer by running
the program. Why do you think it happens that way? You will need to insert printf statements to
display those values.

their values are going to be garbage and have need to be declared to a variable.

3. How do you prevent x, y, and the content of arr from having unexpected values? Try to fix them in
the program.

You declared them to a value

4. The moment you have declared a variable, the program will allocate a memory location for it. Each
memory location has an address. Now insert printf statements to display the addresses of x and y.

address of x: 0x7fffc8688274
address of y: 0x7fffc8688278

5. Now insert code so that px points to x and py points to y. Print out the values and addresses of those
pointers using only the pointer variables (yes, pointers have addresses too!). You should see that the value of
px is equal to the address of x, and the same is true for py and y.

DONE
6. As we have learned in lectures, an array name can be used as a pointer to access the content of the array.
Write a loop to output the contents of arr by using arr as a pointer (do not use [] in your loop).

DONE
7. Are array names really the same as pointers? Let us find out! An array name points to the first element
of an array, so arr should point to the address of arr[0]. Insert code to verify this.

DONE
8. Now print out the address of arr. Does the result make sense? Why

yes it makes sense because they both print out the same address and value.